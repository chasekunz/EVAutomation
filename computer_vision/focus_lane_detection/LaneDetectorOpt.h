/** @file LaneDetectorOpt.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef LANEDETECTOROPT_H
#define LANEDETECTOROPT_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef LANEDETECTORPARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define LANEDETECTORPARSER_PACKAGE "LaneDetector"
#endif

#ifndef LANEDETECTORPARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define LANEDETECTORPARSER_PACKAGE_NAME "LaneDetector"
#endif

#ifndef LANEDETECTORPARSER_VERSION
/** @brief the program version */
#define LANEDETECTORPARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct LaneDetectorParserInfo
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int ipmWidth_arg;	/**< @brief width of IPM image to use.  */
  char * ipmWidth_orig;	/**< @brief width of IPM image to use original value given at command line.  */
  const char *ipmWidth_help; /**< @brief width of IPM image to use help description.  */
  int ipmHeight_arg;	/**< @brief height of IPM image to use.  */
  char * ipmHeight_orig;	/**< @brief height of IPM image to use original value given at command line.  */
  const char *ipmHeight_help; /**< @brief height of IPM image to use help description.  */
  int ipmTop_arg;	/**< @brief Top point in original image of region to make IPM for.  */
  char * ipmTop_orig;	/**< @brief Top point in original image of region to make IPM for original value given at command line.  */
  const char *ipmTop_help; /**< @brief Top point in original image of region to make IPM for help description.  */
  int ipmLeft_arg;	/**< @brief Left point in original image of region to make IPM for.  */
  char * ipmLeft_orig;	/**< @brief Left point in original image of region to make IPM for original value given at command line.  */
  const char *ipmLeft_help; /**< @brief Left point in original image of region to make IPM for help description.  */
  int ipmRight_arg;	/**< @brief Right point in original image region to make IPM for.  */
  char * ipmRight_orig;	/**< @brief Right point in original image region to make IPM for original value given at command line.  */
  const char *ipmRight_help; /**< @brief Right point in original image region to make IPM for help description.  */
  int ipmBottom_arg;	/**< @brief Bottom point in original image region to make IPM for.  */
  char * ipmBottom_orig;	/**< @brief Bottom point in original image region to make IPM for original value given at command line.  */
  const char *ipmBottom_help; /**< @brief Bottom point in original image region to make IPM for help description.  */
  int ipmInterpolation_arg;	/**< @brief The method to use for IPM interpolation.  */
  char * ipmInterpolation_orig;	/**< @brief The method to use for IPM interpolation original value given at command line.  */
  const char *ipmInterpolation_help; /**< @brief The method to use for IPM interpolation help description.  */
  double lineWidth_arg;	/**< @brief width of line to detect in mm (in the world).  */
  char * lineWidth_orig;	/**< @brief width of line to detect in mm (in the world) original value given at command line.  */
  const char *lineWidth_help; /**< @brief width of line to detect in mm (in the world) help description.  */
  double lineHeight_arg;	/**< @brief height of line to detect in mm (in the world).  */
  char * lineHeight_orig;	/**< @brief height of line to detect in mm (in the world) original value given at command line.  */
  const char *lineHeight_help; /**< @brief height of line to detect in mm (in the world) help description.  */
  int kernelWidth_arg;	/**< @brief widht of kernel to use for filtering.  */
  char * kernelWidth_orig;	/**< @brief widht of kernel to use for filtering original value given at command line.  */
  const char *kernelWidth_help; /**< @brief widht of kernel to use for filtering help description.  */
  int kernelHeight_arg;	/**< @brief Height of kernel to use for filtering.  */
  char * kernelHeight_orig;	/**< @brief Height of kernel to use for filtering original value given at command line.  */
  const char *kernelHeight_help; /**< @brief Height of kernel to use for filtering help description.  */
  double lowerQuantile_arg;	/**< @brief lower quantile to use for thresholding the filtered image.  */
  char * lowerQuantile_orig;	/**< @brief lower quantile to use for thresholding the filtered image original value given at command line.  */
  const char *lowerQuantile_help; /**< @brief lower quantile to use for thresholding the filtered image help description.  */
  int localMaxima_arg;	/**< @brief whether to return local maxima or just the maximum.  */
  char * localMaxima_orig;	/**< @brief whether to return local maxima or just the maximum original value given at command line.  */
  const char *localMaxima_help; /**< @brief whether to return local maxima or just the maximum help description.  */
  int groupingType_arg;	/**< @brief type of grouping to use (default 0: HV lines).  */
  char * groupingType_orig;	/**< @brief type of grouping to use (default 0: HV lines) original value given at command line.  */
  const char *groupingType_help; /**< @brief type of grouping to use (default 0: HV lines) help description.  */
  double binarize_arg;	/**< @brief whether to binarize the thresholded image or use the raw values.  */
  char * binarize_orig;	/**< @brief whether to binarize the thresholded image or use the raw values original value given at command line.  */
  const char *binarize_help; /**< @brief whether to binarize the thresholded image or use the raw values help description.  */
  double detectionThreshold_arg;	/**< @brief threshold for line scores to declare as line.  */
  char * detectionThreshold_orig;	/**< @brief threshold for line scores to declare as line original value given at command line.  */
  const char *detectionThreshold_help; /**< @brief threshold for line scores to declare as line help description.  */
  int smoothScores_arg;	/**< @brief whether to smooth scores of lines detected or not.  */
  char * smoothScores_orig;	/**< @brief whether to smooth scores of lines detected or not original value given at command line.  */
  const char *smoothScores_help; /**< @brief whether to smooth scores of lines detected or not help description.  */
  double rMin_arg;	/**< @brief rMin for Hough transform (in pixels).  */
  char * rMin_orig;	/**< @brief rMin for Hough transform (in pixels) original value given at command line.  */
  const char *rMin_help; /**< @brief rMin for Hough transform (in pixels) help description.  */
  double rMax_arg;	/**< @brief rMax for Hough transform (in pixels).  */
  char * rMax_orig;	/**< @brief rMax for Hough transform (in pixels) original value given at command line.  */
  const char *rMax_help; /**< @brief rMax for Hough transform (in pixels) help description.  */
  double rStep_arg;	/**< @brief rStep for Hough transform (in pixels).  */
  char * rStep_orig;	/**< @brief rStep for Hough transform (in pixels) original value given at command line.  */
  const char *rStep_help; /**< @brief rStep for Hough transform (in pixels) help description.  */
  double thetaMin_arg;	/**< @brief thetaMin for Hough transform (in degrees).  */
  char * thetaMin_orig;	/**< @brief thetaMin for Hough transform (in degrees) original value given at command line.  */
  const char *thetaMin_help; /**< @brief thetaMin for Hough transform (in degrees) help description.  */
  double thetaMax_arg;	/**< @brief thetaMax for Hough transform (in degrees).  */
  char * thetaMax_orig;	/**< @brief thetaMax for Hough transform (in degrees) original value given at command line.  */
  const char *thetaMax_help; /**< @brief thetaMax for Hough transform (in degrees) help description.  */
  double thetaStep_arg;	/**< @brief thetaStep for Hough transform (in degrees).  */
  char * thetaStep_orig;	/**< @brief thetaStep for Hough transform (in degrees) original value given at command line.  */
  const char *thetaStep_help; /**< @brief thetaStep for Hough transform (in degrees) help description.  */
  double ipmVpPortion_arg;	/**< @brief Portion of IPM image height to add to y-coordinate of VP.  */
  char * ipmVpPortion_orig;	/**< @brief Portion of IPM image height to add to y-coordinate of VP original value given at command line.  */
  const char *ipmVpPortion_help; /**< @brief Portion of IPM image height to add to y-coordinate of VP help description.  */
  int getEndPoints_arg;	/**< @brief Get the endpoints of the line.  */
  char * getEndPoints_orig;	/**< @brief Get the endpoints of the line original value given at command line.  */
  const char *getEndPoints_help; /**< @brief Get the endpoints of the line help description.  */
  int group_arg;	/**< @brief group nearby lines or not (default 1: group).  */
  char * group_orig;	/**< @brief group nearby lines or not (default 1: group) original value given at command line.  */
  const char *group_help; /**< @brief group nearby lines or not (default 1: group) help description.  */
  double groupThreshold_arg;	/**< @brief Threshold for grouping nearby lines (default 10).  */
  char * groupThreshold_orig;	/**< @brief Threshold for grouping nearby lines (default 10) original value given at command line.  */
  const char *groupThreshold_help; /**< @brief Threshold for grouping nearby lines (default 10) help description.  */
  int ransac_arg;	/**< @brief use RANSAC (1) or not (0).  */
  char * ransac_orig;	/**< @brief use RANSAC (1) or not (0) original value given at command line.  */
  const char *ransac_help; /**< @brief use RANSAC (1) or not (0) help description.  */
  int ransacLineNumSamples_arg;	/**< @brief Number of samples to use for RANSAC.  */
  char * ransacLineNumSamples_orig;	/**< @brief Number of samples to use for RANSAC original value given at command line.  */
  const char *ransacLineNumSamples_help; /**< @brief Number of samples to use for RANSAC help description.  */
  int ransacLineNumIterations_arg;	/**< @brief Number of iterations to use for RANSAC.  */
  char * ransacLineNumIterations_orig;	/**< @brief Number of iterations to use for RANSAC original value given at command line.  */
  const char *ransacLineNumIterations_help; /**< @brief Number of iterations to use for RANSAC help description.  */
  int ransacLineNumGoodFit_arg;	/**< @brief Number of close points to consider a good line fit.  */
  char * ransacLineNumGoodFit_orig;	/**< @brief Number of close points to consider a good line fit original value given at command line.  */
  const char *ransacLineNumGoodFit_help; /**< @brief Number of close points to consider a good line fit help description.  */
  double ransacLineThreshold_arg;	/**< @brief Threshold to consider a point close.  */
  char * ransacLineThreshold_orig;	/**< @brief Threshold to consider a point close original value given at command line.  */
  const char *ransacLineThreshold_help; /**< @brief Threshold to consider a point close help description.  */
  double ransacLineScoreThreshold_arg;	/**< @brief Threshold for detected line scores.  */
  char * ransacLineScoreThreshold_orig;	/**< @brief Threshold for detected line scores original value given at command line.  */
  const char *ransacLineScoreThreshold_help; /**< @brief Threshold for detected line scores help description.  */
  int ransacLineBinarize_arg;	/**< @brief Whether to binarize image for RANSAC or not.  */
  char * ransacLineBinarize_orig;	/**< @brief Whether to binarize image for RANSAC or not original value given at command line.  */
  const char *ransacLineBinarize_help; /**< @brief Whether to binarize image for RANSAC or not help description.  */
  int ransacLineWindow_arg;	/**< @brief Half width to use for ransac window.  */
  char * ransacLineWindow_orig;	/**< @brief Half width to use for ransac window original value given at command line.  */
  const char *ransacLineWindow_help; /**< @brief Half width to use for ransac window help description.  */
  int ransacSplineNumSamples_arg;	/**< @brief Number of samples to use for RANSAC.  */
  char * ransacSplineNumSamples_orig;	/**< @brief Number of samples to use for RANSAC original value given at command line.  */
  const char *ransacSplineNumSamples_help; /**< @brief Number of samples to use for RANSAC help description.  */
  int ransacSplineNumIterations_arg;	/**< @brief Number of iterations to use for RANSAC.  */
  char * ransacSplineNumIterations_orig;	/**< @brief Number of iterations to use for RANSAC original value given at command line.  */
  const char *ransacSplineNumIterations_help; /**< @brief Number of iterations to use for RANSAC help description.  */
  int ransacSplineNumGoodFit_arg;	/**< @brief Number of close points to consider a good line fit.  */
  char * ransacSplineNumGoodFit_orig;	/**< @brief Number of close points to consider a good line fit original value given at command line.  */
  const char *ransacSplineNumGoodFit_help; /**< @brief Number of close points to consider a good line fit help description.  */
  double ransacSplineThreshold_arg;	/**< @brief Threshold to consider a point close.  */
  char * ransacSplineThreshold_orig;	/**< @brief Threshold to consider a point close original value given at command line.  */
  const char *ransacSplineThreshold_help; /**< @brief Threshold to consider a point close help description.  */
  double ransacSplineScoreThreshold_arg;	/**< @brief Threshold for detected line scores.  */
  char * ransacSplineScoreThreshold_orig;	/**< @brief Threshold for detected line scores original value given at command line.  */
  const char *ransacSplineScoreThreshold_help; /**< @brief Threshold for detected line scores help description.  */
  int ransacSplineBinarize_arg;	/**< @brief Whether to binarize image for RANSAC or not.  */
  char * ransacSplineBinarize_orig;	/**< @brief Whether to binarize image for RANSAC or not original value given at command line.  */
  const char *ransacSplineBinarize_help; /**< @brief Whether to binarize image for RANSAC or not help description.  */
  int ransacSplineWindow_arg;	/**< @brief Half width to use for ransac window.  */
  char * ransacSplineWindow_orig;	/**< @brief Half width to use for ransac window original value given at command line.  */
  const char *ransacSplineWindow_help; /**< @brief Half width to use for ransac window help description.  */
  int ransacSplineDegree_arg;	/**< @brief Degree of spline to use.  */
  char * ransacSplineDegree_orig;	/**< @brief Degree of spline to use original value given at command line.  */
  const char *ransacSplineDegree_help; /**< @brief Degree of spline to use help description.  */
  int ransacSpline_arg;	/**< @brief Whether to use splines.  */
  char * ransacSpline_orig;	/**< @brief Whether to use splines original value given at command line.  */
  const char *ransacSpline_help; /**< @brief Whether to use splines help description.  */
  int ransacLine_arg;	/**< @brief Whether to use lines.  */
  char * ransacLine_orig;	/**< @brief Whether to use lines original value given at command line.  */
  const char *ransacLine_help; /**< @brief Whether to use lines help description.  */
  float ransacSplineStep_arg;	/**< @brief Step to use when pixelzing spline in ransac.  */
  char * ransacSplineStep_orig;	/**< @brief Step to use when pixelzing spline in ransac original value given at command line.  */
  const char *ransacSplineStep_help; /**< @brief Step to use when pixelzing spline in ransac help description.  */
  float overlapThreshold_arg;	/**< @brief Overlap threshold to use for grouping of bounding boxes.  */
  char * overlapThreshold_orig;	/**< @brief Overlap threshold to use for grouping of bounding boxes original value given at command line.  */
  const char *overlapThreshold_help; /**< @brief Overlap threshold to use for grouping of bounding boxes help description.  */
  float localizeAngleThreshold_arg;	/**< @brief Angle threshold used for localization (cosine, 1: most restrictive, 0: most liberal).  */
  char * localizeAngleThreshold_orig;	/**< @brief Angle threshold used for localization (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *localizeAngleThreshold_help; /**< @brief Angle threshold used for localization (cosine, 1: most restrictive, 0: most liberal) help description.  */
  int localizeNumLinePixels_arg;	/**< @brief Number of pixels to go in normal direction for localization.  */
  char * localizeNumLinePixels_orig;	/**< @brief Number of pixels to go in normal direction for localization original value given at command line.  */
  const char *localizeNumLinePixels_help; /**< @brief Number of pixels to go in normal direction for localization help description.  */
  float extendAngleThreshold_arg;	/**< @brief Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendAngleThreshold_orig;	/**< @brief Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendAngleThreshold_help; /**< @brief Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  float extendMeanDirAngleThreshold_arg;	/**< @brief Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendMeanDirAngleThreshold_orig;	/**< @brief Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendMeanDirAngleThreshold_help; /**< @brief Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  float extendMeanDirAngleThresholdBack_arg;	/**< @brief Angle threshold from mean direction used for extending back (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendMeanDirAngleThresholdBack_orig;	/**< @brief Angle threshold from mean direction used for extending back (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendMeanDirAngleThresholdBack_help; /**< @brief Angle threshold from mean direction used for extending back (cosine, 1: most restrictive, 0: most liberal) help description.  */
  float extendMeanDirAngleThresholdForward_arg;	/**< @brief Angle threshold from mean direction used for extending forward (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendMeanDirAngleThresholdForward_orig;	/**< @brief Angle threshold from mean direction used for extending forward (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendMeanDirAngleThresholdForward_help; /**< @brief Angle threshold from mean direction used for extending forward (cosine, 1: most restrictive, 0: most liberal) help description.  */
  int extendLinePixelsTangent_arg;	/**< @brief Number of pixels to go in tangent direction for extending.  */
  char * extendLinePixelsTangent_orig;	/**< @brief Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendLinePixelsTangent_help; /**< @brief Number of pixels to go in tangent direction for extending help description.  */
  int extendLinePixelsNormal_arg;	/**< @brief Number of pixels to go in tangent direction for extending.  */
  char * extendLinePixelsNormal_orig;	/**< @brief Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendLinePixelsNormal_help; /**< @brief Number of pixels to go in tangent direction for extending help description.  */
  float extendContThreshold_arg;	/**< @brief Threhsold used for stopping the extending process (higher -> less extending).  */
  char * extendContThreshold_orig;	/**< @brief Threhsold used for stopping the extending process (higher -> less extending) original value given at command line.  */
  const char *extendContThreshold_help; /**< @brief Threhsold used for stopping the extending process (higher -> less extending) help description.  */
  int extendDeviationThreshold_arg;	/**< @brief Stop extending when number of deviating points exceeds this threshold.  */
  char * extendDeviationThreshold_orig;	/**< @brief Stop extending when number of deviating points exceeds this threshold original value given at command line.  */
  const char *extendDeviationThreshold_help; /**< @brief Stop extending when number of deviating points exceeds this threshold help description.  */
  int extendRectTop_arg;	/**< @brief Top point for extension bounding box.  */
  char * extendRectTop_orig;	/**< @brief Top point for extension bounding box original value given at command line.  */
  const char *extendRectTop_help; /**< @brief Top point for extension bounding box help description.  */
  int extendRectBottom_arg;	/**< @brief Bottom point for extension bounding box.  */
  char * extendRectBottom_orig;	/**< @brief Bottom point for extension bounding box original value given at command line.  */
  const char *extendRectBottom_help; /**< @brief Bottom point for extension bounding box help description.  */
  float extendIPMAngleThreshold_arg;	/**< @brief Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendIPMAngleThreshold_orig;	/**< @brief Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendIPMAngleThreshold_help; /**< @brief Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  float extendIPMMeanDirAngleThreshold_arg;	/**< @brief Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendIPMMeanDirAngleThreshold_orig;	/**< @brief Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendIPMMeanDirAngleThreshold_help; /**< @brief Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  int extendIPMLinePixelsTangent_arg;	/**< @brief Number of pixels to go in tangent direction for extending.  */
  char * extendIPMLinePixelsTangent_orig;	/**< @brief Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendIPMLinePixelsTangent_help; /**< @brief Number of pixels to go in tangent direction for extending help description.  */
  int extendIPMLinePixelsNormal_arg;	/**< @brief Number of pixels to go in tangent direction for extending.  */
  char * extendIPMLinePixelsNormal_orig;	/**< @brief Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendIPMLinePixelsNormal_help; /**< @brief Number of pixels to go in tangent direction for extending help description.  */
  float extendIPMContThreshold_arg;	/**< @brief Threhsold used for stopping the extending process (higher -> less extending).  */
  char * extendIPMContThreshold_orig;	/**< @brief Threhsold used for stopping the extending process (higher -> less extending) original value given at command line.  */
  const char *extendIPMContThreshold_help; /**< @brief Threhsold used for stopping the extending process (higher -> less extending) help description.  */
  int extendIPMDeviationThreshold_arg;	/**< @brief Stop extending when number of deviating points exceeds this threshold.  */
  char * extendIPMDeviationThreshold_orig;	/**< @brief Stop extending when number of deviating points exceeds this threshold original value given at command line.  */
  const char *extendIPMDeviationThreshold_help; /**< @brief Stop extending when number of deviating points exceeds this threshold help description.  */
  int extendIPMRectTop_arg;	/**< @brief Top point for extension bounding box.  */
  char * extendIPMRectTop_orig;	/**< @brief Top point for extension bounding box original value given at command line.  */
  const char *extendIPMRectTop_help; /**< @brief Top point for extension bounding box help description.  */
  int extendIPMRectBottom_arg;	/**< @brief Bottom point for extension bounding box.  */
  char * extendIPMRectBottom_orig;	/**< @brief Bottom point for extension bounding box original value given at command line.  */
  const char *extendIPMRectBottom_help; /**< @brief Bottom point for extension bounding box help description.  */
  int splineScoreJitter_arg;	/**< @brief Number of pixels to go around the spline to compute score.  */
  char * splineScoreJitter_orig;	/**< @brief Number of pixels to go around the spline to compute score original value given at command line.  */
  const char *splineScoreJitter_help; /**< @brief Number of pixels to go around the spline to compute score help description.  */
  float splineScoreLengthRatio_arg;	/**< @brief Ratio of spline length to use.  */
  char * splineScoreLengthRatio_orig;	/**< @brief Ratio of spline length to use original value given at command line.  */
  const char *splineScoreLengthRatio_help; /**< @brief Ratio of spline length to use help description.  */
  float splineScoreAngleRatio_arg;	/**< @brief Ratio of spline angle to use.  */
  char * splineScoreAngleRatio_orig;	/**< @brief Ratio of spline angle to use original value given at command line.  */
  const char *splineScoreAngleRatio_help; /**< @brief Ratio of spline angle to use help description.  */
  float splineScoreStep_arg;	/**< @brief Step to use for spline score computation.  */
  char * splineScoreStep_orig;	/**< @brief Step to use for spline score computation original value given at command line.  */
  const char *splineScoreStep_help; /**< @brief Step to use for spline score computation help description.  */
  int splineTrackingNumAbsentFrames_arg;	/**< @brief number of frames the track is allowed to be absent before deleting it.  */
  char * splineTrackingNumAbsentFrames_orig;	/**< @brief number of frames the track is allowed to be absent before deleting it original value given at command line.  */
  const char *splineTrackingNumAbsentFrames_help; /**< @brief number of frames the track is allowed to be absent before deleting it help description.  */
  int splineTrackingNumSeenFrames_arg;	/**< @brief number of frames before considering the track good.  */
  char * splineTrackingNumSeenFrames_orig;	/**< @brief number of frames before considering the track good original value given at command line.  */
  const char *splineTrackingNumSeenFrames_help; /**< @brief number of frames before considering the track good help description.  */
  float mergeSplineThetaThreshold_arg;	/**< @brief Angle threshold for merging splines (radians).  */
  char * mergeSplineThetaThreshold_orig;	/**< @brief Angle threshold for merging splines (radians) original value given at command line.  */
  const char *mergeSplineThetaThreshold_help; /**< @brief Angle threshold for merging splines (radians) help description.  */
  float mergeSplineRThreshold_arg;	/**< @brief R threshold (distance from origin) for merginn splines.  */
  char * mergeSplineRThreshold_orig;	/**< @brief R threshold (distance from origin) for merginn splines original value given at command line.  */
  const char *mergeSplineRThreshold_help; /**< @brief R threshold (distance from origin) for merginn splines help description.  */
  float mergeSplineMeanThetaThreshold_arg;	/**< @brief Mean Angle threshold for merging splines (radians).  */
  char * mergeSplineMeanThetaThreshold_orig;	/**< @brief Mean Angle threshold for merging splines (radians) original value given at command line.  */
  const char *mergeSplineMeanThetaThreshold_help; /**< @brief Mean Angle threshold for merging splines (radians) help description.  */
  float mergeSplineMeanRThreshold_arg;	/**< @brief Mean R threshold (distance from origin) for merginn splines.  */
  char * mergeSplineMeanRThreshold_orig;	/**< @brief Mean R threshold (distance from origin) for merginn splines original value given at command line.  */
  const char *mergeSplineMeanRThreshold_help; /**< @brief Mean R threshold (distance from origin) for merginn splines help description.  */
  float mergeSplineCentroidThreshold_arg;	/**< @brief Distance threshold between spline cetroids for merging.  */
  char * mergeSplineCentroidThreshold_orig;	/**< @brief Distance threshold between spline cetroids for merging original value given at command line.  */
  const char *mergeSplineCentroidThreshold_help; /**< @brief Distance threshold between spline cetroids for merging help description.  */
  int lineTrackingNumAbsentFrames_arg;	/**< @brief number of frames the track is allowed to be absent before deleting it.  */
  char * lineTrackingNumAbsentFrames_orig;	/**< @brief number of frames the track is allowed to be absent before deleting it original value given at command line.  */
  const char *lineTrackingNumAbsentFrames_help; /**< @brief number of frames the track is allowed to be absent before deleting it help description.  */
  int lineTrackingNumSeenFrames_arg;	/**< @brief number of frames before considering the track good.  */
  char * lineTrackingNumSeenFrames_orig;	/**< @brief number of frames before considering the track good original value given at command line.  */
  const char *lineTrackingNumSeenFrames_help; /**< @brief number of frames before considering the track good help description.  */
  float mergeLineThetaThreshold_arg;	/**< @brief Angle threshold for merging lines (radians).  */
  char * mergeLineThetaThreshold_orig;	/**< @brief Angle threshold for merging lines (radians) original value given at command line.  */
  const char *mergeLineThetaThreshold_help; /**< @brief Angle threshold for merging lines (radians) help description.  */
  float mergeLineRThreshold_arg;	/**< @brief R threshold (distance from origin) for merging lines.  */
  char * mergeLineRThreshold_orig;	/**< @brief R threshold (distance from origin) for merging lines original value given at command line.  */
  const char *mergeLineRThreshold_help; /**< @brief R threshold (distance from origin) for merging lines help description.  */
  int numStrips_arg;	/**< @brief Number of horizontal strips to divide the image to.  */
  char * numStrips_orig;	/**< @brief Number of horizontal strips to divide the image to original value given at command line.  */
  const char *numStrips_help; /**< @brief Number of horizontal strips to divide the image to help description.  */
  int checkSplines_arg;	/**< @brief Whtethet to check splines or not.  */
  char * checkSplines_orig;	/**< @brief Whtethet to check splines or not original value given at command line.  */
  const char *checkSplines_help; /**< @brief Whtethet to check splines or not help description.  */
  float checkSplinesCurvenessThreshold_arg;	/**< @brief Curveness Threshold for checking splines.  */
  char * checkSplinesCurvenessThreshold_orig;	/**< @brief Curveness Threshold for checking splines original value given at command line.  */
  const char *checkSplinesCurvenessThreshold_help; /**< @brief Curveness Threshold for checking splines help description.  */
  float checkSplinesLengthThreshold_arg;	/**< @brief Length Threshold for checking splines.  */
  char * checkSplinesLengthThreshold_orig;	/**< @brief Length Threshold for checking splines original value given at command line.  */
  const char *checkSplinesLengthThreshold_help; /**< @brief Length Threshold for checking splines help description.  */
  float checkSplinesThetaDiffThreshold_arg;	/**< @brief ThetaDiff Threshold for checking splines.  */
  char * checkSplinesThetaDiffThreshold_orig;	/**< @brief ThetaDiff Threshold for checking splines original value given at command line.  */
  const char *checkSplinesThetaDiffThreshold_help; /**< @brief ThetaDiff Threshold for checking splines help description.  */
  float checkSplinesThetaThreshold_arg;	/**< @brief ThetaThreshold Threshold for checking splines.  */
  char * checkSplinesThetaThreshold_orig;	/**< @brief ThetaThreshold Threshold for checking splines original value given at command line.  */
  const char *checkSplinesThetaThreshold_help; /**< @brief ThetaThreshold Threshold for checking splines help description.  */
  int checkIPMSplines_arg;	/**< @brief Whtethet to check IPM splines or not.  */
  char * checkIPMSplines_orig;	/**< @brief Whtethet to check IPM splines or not original value given at command line.  */
  const char *checkIPMSplines_help; /**< @brief Whtethet to check IPM splines or not help description.  */
  float checkIPMSplinesCurvenessThreshold_arg;	/**< @brief Curveness Threshold for checking splines.  */
  char * checkIPMSplinesCurvenessThreshold_orig;	/**< @brief Curveness Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesCurvenessThreshold_help; /**< @brief Curveness Threshold for checking splines help description.  */
  float checkIPMSplinesLengthThreshold_arg;	/**< @brief Length Threshold for checking splines.  */
  char * checkIPMSplinesLengthThreshold_orig;	/**< @brief Length Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesLengthThreshold_help; /**< @brief Length Threshold for checking splines help description.  */
  float checkIPMSplinesThetaDiffThreshold_arg;	/**< @brief ThetaDiff Threshold for checking splines.  */
  char * checkIPMSplinesThetaDiffThreshold_orig;	/**< @brief ThetaDiff Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesThetaDiffThreshold_help; /**< @brief ThetaDiff Threshold for checking splines help description.  */
  float checkIPMSplinesThetaThreshold_arg;	/**< @brief ThetaThreshold Threshold for checking splines.  */
  char * checkIPMSplinesThetaThreshold_orig;	/**< @brief ThetaThreshold Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesThetaThreshold_help; /**< @brief ThetaThreshold Threshold for checking splines help description.  */
  float finalSplineScoreThreshold_arg;	/**< @brief Final Threshold for declaring a valid spline.  */
  char * finalSplineScoreThreshold_orig;	/**< @brief Final Threshold for declaring a valid spline original value given at command line.  */
  const char *finalSplineScoreThreshold_help; /**< @brief Final Threshold for declaring a valid spline help description.  */
  int useGroundPlane_arg;	/**< @brief Use groudn plane or not when sending to map.  */
  char * useGroundPlane_orig;	/**< @brief Use groudn plane or not when sending to map original value given at command line.  */
  const char *useGroundPlane_help; /**< @brief Use groudn plane or not when sending to map help description.  */
  int checkColor_arg;	/**< @brief Whether to check colors or not.  */
  char * checkColor_orig;	/**< @brief Whether to check colors or not original value given at command line.  */
  const char *checkColor_help; /**< @brief Whether to check colors or not help description.  */
  int checkColorWindow_arg;	/**< @brief Size of window to use.  */
  char * checkColorWindow_orig;	/**< @brief Size of window to use original value given at command line.  */
  const char *checkColorWindow_help; /**< @brief Size of window to use help description.  */
  int checkColorNumBins_arg;	/**< @brief Number of bins to use.  */
  char * checkColorNumBins_orig;	/**< @brief Number of bins to use original value given at command line.  */
  const char *checkColorNumBins_help; /**< @brief Number of bins to use help description.  */
  float checkColorNumYellowMin_arg;	/**< @brief Min ratio of yellow points.  */
  char * checkColorNumYellowMin_orig;	/**< @brief Min ratio of yellow points original value given at command line.  */
  const char *checkColorNumYellowMin_help; /**< @brief Min ratio of yellow points help description.  */
  float checkColorRGMin_arg;	/**< @brief Min RG diff.  */
  char * checkColorRGMin_orig;	/**< @brief Min RG diff original value given at command line.  */
  const char *checkColorRGMin_help; /**< @brief Min RG diff help description.  */
  float checkColorRGMax_arg;	/**< @brief Max RG diff.  */
  char * checkColorRGMax_orig;	/**< @brief Max RG diff original value given at command line.  */
  const char *checkColorRGMax_help; /**< @brief Max RG diff help description.  */
  float checkColorGBMin_arg;	/**< @brief Min GB diff.  */
  char * checkColorGBMin_orig;	/**< @brief Min GB diff original value given at command line.  */
  const char *checkColorGBMin_help; /**< @brief Min GB diff help description.  */
  float checkColorRBMin_arg;	/**< @brief Min RB diff.  */
  char * checkColorRBMin_orig;	/**< @brief Min RB diff original value given at command line.  */
  const char *checkColorRBMin_help; /**< @brief Min RB diff help description.  */
  float checkColorRBFThreshold_arg;	/**< @brief RBF Threshold.  */
  char * checkColorRBFThreshold_orig;	/**< @brief RBF Threshold original value given at command line.  */
  const char *checkColorRBFThreshold_help; /**< @brief RBF Threshold help description.  */
  int checkColorRBF_arg;	/**< @brief Whether to use RBF or not.  */
  char * checkColorRBF_orig;	/**< @brief Whether to use RBF or not original value given at command line.  */
  const char *checkColorRBF_help; /**< @brief Whether to use RBF or not help description.  */
  int ipmWindowClear_arg;	/**< @brief Whether to clear part of the IPM image.  */
  char * ipmWindowClear_orig;	/**< @brief Whether to clear part of the IPM image original value given at command line.  */
  const char *ipmWindowClear_help; /**< @brief Whether to clear part of the IPM image help description.  */
  int ipmWindowLeft_arg;	/**< @brief Left corrdinate of window to keep in IPM.  */
  char * ipmWindowLeft_orig;	/**< @brief Left corrdinate of window to keep in IPM original value given at command line.  */
  const char *ipmWindowLeft_help; /**< @brief Left corrdinate of window to keep in IPM help description.  */
  int ipmWindowRight_arg;	/**< @brief Left corrdinate of window to keep in IPM.  */
  char * ipmWindowRight_orig;	/**< @brief Left corrdinate of window to keep in IPM original value given at command line.  */
  const char *ipmWindowRight_help; /**< @brief Left corrdinate of window to keep in IPM help description.  */
  int checkLaneWidth_arg;	/**< @brief Whether to check lane width or not.  */
  char * checkLaneWidth_orig;	/**< @brief Whether to check lane width or not original value given at command line.  */
  const char *checkLaneWidth_help; /**< @brief Whether to check lane width or not help description.  */
  float checkLaneWidthMean_arg;	/**< @brief Mean of lane width to look for.  */
  char * checkLaneWidthMean_orig;	/**< @brief Mean of lane width to look for original value given at command line.  */
  const char *checkLaneWidthMean_help; /**< @brief Mean of lane width to look for help description.  */
  float checkLaneWidthStd_arg;	/**< @brief Std deviation of lane width to look for.  */
  char * checkLaneWidthStd_orig;	/**< @brief Std deviation of lane width to look for original value given at command line.  */
  const char *checkLaneWidthStd_help; /**< @brief Std deviation of lane width to look for help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int ipmWidth_given ;	/**< @brief Whether ipmWidth was given.  */
  unsigned int ipmHeight_given ;	/**< @brief Whether ipmHeight was given.  */
  unsigned int ipmTop_given ;	/**< @brief Whether ipmTop was given.  */
  unsigned int ipmLeft_given ;	/**< @brief Whether ipmLeft was given.  */
  unsigned int ipmRight_given ;	/**< @brief Whether ipmRight was given.  */
  unsigned int ipmBottom_given ;	/**< @brief Whether ipmBottom was given.  */
  unsigned int ipmInterpolation_given ;	/**< @brief Whether ipmInterpolation was given.  */
  unsigned int lineWidth_given ;	/**< @brief Whether lineWidth was given.  */
  unsigned int lineHeight_given ;	/**< @brief Whether lineHeight was given.  */
  unsigned int kernelWidth_given ;	/**< @brief Whether kernelWidth was given.  */
  unsigned int kernelHeight_given ;	/**< @brief Whether kernelHeight was given.  */
  unsigned int lowerQuantile_given ;	/**< @brief Whether lowerQuantile was given.  */
  unsigned int localMaxima_given ;	/**< @brief Whether localMaxima was given.  */
  unsigned int groupingType_given ;	/**< @brief Whether groupingType was given.  */
  unsigned int binarize_given ;	/**< @brief Whether binarize was given.  */
  unsigned int detectionThreshold_given ;	/**< @brief Whether detectionThreshold was given.  */
  unsigned int smoothScores_given ;	/**< @brief Whether smoothScores was given.  */
  unsigned int rMin_given ;	/**< @brief Whether rMin was given.  */
  unsigned int rMax_given ;	/**< @brief Whether rMax was given.  */
  unsigned int rStep_given ;	/**< @brief Whether rStep was given.  */
  unsigned int thetaMin_given ;	/**< @brief Whether thetaMin was given.  */
  unsigned int thetaMax_given ;	/**< @brief Whether thetaMax was given.  */
  unsigned int thetaStep_given ;	/**< @brief Whether thetaStep was given.  */
  unsigned int ipmVpPortion_given ;	/**< @brief Whether ipmVpPortion was given.  */
  unsigned int getEndPoints_given ;	/**< @brief Whether getEndPoints was given.  */
  unsigned int group_given ;	/**< @brief Whether group was given.  */
  unsigned int groupThreshold_given ;	/**< @brief Whether groupThreshold was given.  */
  unsigned int ransac_given ;	/**< @brief Whether ransac was given.  */
  unsigned int ransacLineNumSamples_given ;	/**< @brief Whether ransacLineNumSamples was given.  */
  unsigned int ransacLineNumIterations_given ;	/**< @brief Whether ransacLineNumIterations was given.  */
  unsigned int ransacLineNumGoodFit_given ;	/**< @brief Whether ransacLineNumGoodFit was given.  */
  unsigned int ransacLineThreshold_given ;	/**< @brief Whether ransacLineThreshold was given.  */
  unsigned int ransacLineScoreThreshold_given ;	/**< @brief Whether ransacLineScoreThreshold was given.  */
  unsigned int ransacLineBinarize_given ;	/**< @brief Whether ransacLineBinarize was given.  */
  unsigned int ransacLineWindow_given ;	/**< @brief Whether ransacLineWindow was given.  */
  unsigned int ransacSplineNumSamples_given ;	/**< @brief Whether ransacSplineNumSamples was given.  */
  unsigned int ransacSplineNumIterations_given ;	/**< @brief Whether ransacSplineNumIterations was given.  */
  unsigned int ransacSplineNumGoodFit_given ;	/**< @brief Whether ransacSplineNumGoodFit was given.  */
  unsigned int ransacSplineThreshold_given ;	/**< @brief Whether ransacSplineThreshold was given.  */
  unsigned int ransacSplineScoreThreshold_given ;	/**< @brief Whether ransacSplineScoreThreshold was given.  */
  unsigned int ransacSplineBinarize_given ;	/**< @brief Whether ransacSplineBinarize was given.  */
  unsigned int ransacSplineWindow_given ;	/**< @brief Whether ransacSplineWindow was given.  */
  unsigned int ransacSplineDegree_given ;	/**< @brief Whether ransacSplineDegree was given.  */
  unsigned int ransacSpline_given ;	/**< @brief Whether ransacSpline was given.  */
  unsigned int ransacLine_given ;	/**< @brief Whether ransacLine was given.  */
  unsigned int ransacSplineStep_given ;	/**< @brief Whether ransacSplineStep was given.  */
  unsigned int overlapThreshold_given ;	/**< @brief Whether overlapThreshold was given.  */
  unsigned int localizeAngleThreshold_given ;	/**< @brief Whether localizeAngleThreshold was given.  */
  unsigned int localizeNumLinePixels_given ;	/**< @brief Whether localizeNumLinePixels was given.  */
  unsigned int extendAngleThreshold_given ;	/**< @brief Whether extendAngleThreshold was given.  */
  unsigned int extendMeanDirAngleThreshold_given ;	/**< @brief Whether extendMeanDirAngleThreshold was given.  */
  unsigned int extendMeanDirAngleThresholdBack_given ;	/**< @brief Whether extendMeanDirAngleThresholdBack was given.  */
  unsigned int extendMeanDirAngleThresholdForward_given ;	/**< @brief Whether extendMeanDirAngleThresholdForward was given.  */
  unsigned int extendLinePixelsTangent_given ;	/**< @brief Whether extendLinePixelsTangent was given.  */
  unsigned int extendLinePixelsNormal_given ;	/**< @brief Whether extendLinePixelsNormal was given.  */
  unsigned int extendContThreshold_given ;	/**< @brief Whether extendContThreshold was given.  */
  unsigned int extendDeviationThreshold_given ;	/**< @brief Whether extendDeviationThreshold was given.  */
  unsigned int extendRectTop_given ;	/**< @brief Whether extendRectTop was given.  */
  unsigned int extendRectBottom_given ;	/**< @brief Whether extendRectBottom was given.  */
  unsigned int extendIPMAngleThreshold_given ;	/**< @brief Whether extendIPMAngleThreshold was given.  */
  unsigned int extendIPMMeanDirAngleThreshold_given ;	/**< @brief Whether extendIPMMeanDirAngleThreshold was given.  */
  unsigned int extendIPMLinePixelsTangent_given ;	/**< @brief Whether extendIPMLinePixelsTangent was given.  */
  unsigned int extendIPMLinePixelsNormal_given ;	/**< @brief Whether extendIPMLinePixelsNormal was given.  */
  unsigned int extendIPMContThreshold_given ;	/**< @brief Whether extendIPMContThreshold was given.  */
  unsigned int extendIPMDeviationThreshold_given ;	/**< @brief Whether extendIPMDeviationThreshold was given.  */
  unsigned int extendIPMRectTop_given ;	/**< @brief Whether extendIPMRectTop was given.  */
  unsigned int extendIPMRectBottom_given ;	/**< @brief Whether extendIPMRectBottom was given.  */
  unsigned int splineScoreJitter_given ;	/**< @brief Whether splineScoreJitter was given.  */
  unsigned int splineScoreLengthRatio_given ;	/**< @brief Whether splineScoreLengthRatio was given.  */
  unsigned int splineScoreAngleRatio_given ;	/**< @brief Whether splineScoreAngleRatio was given.  */
  unsigned int splineScoreStep_given ;	/**< @brief Whether splineScoreStep was given.  */
  unsigned int splineTrackingNumAbsentFrames_given ;	/**< @brief Whether splineTrackingNumAbsentFrames was given.  */
  unsigned int splineTrackingNumSeenFrames_given ;	/**< @brief Whether splineTrackingNumSeenFrames was given.  */
  unsigned int mergeSplineThetaThreshold_given ;	/**< @brief Whether mergeSplineThetaThreshold was given.  */
  unsigned int mergeSplineRThreshold_given ;	/**< @brief Whether mergeSplineRThreshold was given.  */
  unsigned int mergeSplineMeanThetaThreshold_given ;	/**< @brief Whether mergeSplineMeanThetaThreshold was given.  */
  unsigned int mergeSplineMeanRThreshold_given ;	/**< @brief Whether mergeSplineMeanRThreshold was given.  */
  unsigned int mergeSplineCentroidThreshold_given ;	/**< @brief Whether mergeSplineCentroidThreshold was given.  */
  unsigned int lineTrackingNumAbsentFrames_given ;	/**< @brief Whether lineTrackingNumAbsentFrames was given.  */
  unsigned int lineTrackingNumSeenFrames_given ;	/**< @brief Whether lineTrackingNumSeenFrames was given.  */
  unsigned int mergeLineThetaThreshold_given ;	/**< @brief Whether mergeLineThetaThreshold was given.  */
  unsigned int mergeLineRThreshold_given ;	/**< @brief Whether mergeLineRThreshold was given.  */
  unsigned int numStrips_given ;	/**< @brief Whether numStrips was given.  */
  unsigned int checkSplines_given ;	/**< @brief Whether checkSplines was given.  */
  unsigned int checkSplinesCurvenessThreshold_given ;	/**< @brief Whether checkSplinesCurvenessThreshold was given.  */
  unsigned int checkSplinesLengthThreshold_given ;	/**< @brief Whether checkSplinesLengthThreshold was given.  */
  unsigned int checkSplinesThetaDiffThreshold_given ;	/**< @brief Whether checkSplinesThetaDiffThreshold was given.  */
  unsigned int checkSplinesThetaThreshold_given ;	/**< @brief Whether checkSplinesThetaThreshold was given.  */
  unsigned int checkIPMSplines_given ;	/**< @brief Whether checkIPMSplines was given.  */
  unsigned int checkIPMSplinesCurvenessThreshold_given ;	/**< @brief Whether checkIPMSplinesCurvenessThreshold was given.  */
  unsigned int checkIPMSplinesLengthThreshold_given ;	/**< @brief Whether checkIPMSplinesLengthThreshold was given.  */
  unsigned int checkIPMSplinesThetaDiffThreshold_given ;	/**< @brief Whether checkIPMSplinesThetaDiffThreshold was given.  */
  unsigned int checkIPMSplinesThetaThreshold_given ;	/**< @brief Whether checkIPMSplinesThetaThreshold was given.  */
  unsigned int finalSplineScoreThreshold_given ;	/**< @brief Whether finalSplineScoreThreshold was given.  */
  unsigned int useGroundPlane_given ;	/**< @brief Whether useGroundPlane was given.  */
  unsigned int checkColor_given ;	/**< @brief Whether checkColor was given.  */
  unsigned int checkColorWindow_given ;	/**< @brief Whether checkColorWindow was given.  */
  unsigned int checkColorNumBins_given ;	/**< @brief Whether checkColorNumBins was given.  */
  unsigned int checkColorNumYellowMin_given ;	/**< @brief Whether checkColorNumYellowMin was given.  */
  unsigned int checkColorRGMin_given ;	/**< @brief Whether checkColorRGMin was given.  */
  unsigned int checkColorRGMax_given ;	/**< @brief Whether checkColorRGMax was given.  */
  unsigned int checkColorGBMin_given ;	/**< @brief Whether checkColorGBMin was given.  */
  unsigned int checkColorRBMin_given ;	/**< @brief Whether checkColorRBMin was given.  */
  unsigned int checkColorRBFThreshold_given ;	/**< @brief Whether checkColorRBFThreshold was given.  */
  unsigned int checkColorRBF_given ;	/**< @brief Whether checkColorRBF was given.  */
  unsigned int ipmWindowClear_given ;	/**< @brief Whether ipmWindowClear was given.  */
  unsigned int ipmWindowLeft_given ;	/**< @brief Whether ipmWindowLeft was given.  */
  unsigned int ipmWindowRight_given ;	/**< @brief Whether ipmWindowRight was given.  */
  unsigned int checkLaneWidth_given ;	/**< @brief Whether checkLaneWidth was given.  */
  unsigned int checkLaneWidthMean_given ;	/**< @brief Whether checkLaneWidthMean was given.  */
  unsigned int checkLaneWidthStd_given ;	/**< @brief Whether checkLaneWidthStd was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct LaneDetectorParser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure LaneDetectorParserInfo (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure LaneDetectorParserInfo (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *LaneDetectorParserInfo_purpose;
/** @brief the usage string of the program */
extern const char *LaneDetectorParserInfo_usage;
/** @brief the description string of the program */
extern const char *LaneDetectorParserInfo_description;
/** @brief all the lines making the help output */
extern const char *LaneDetectorParserInfo_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int LaneDetectorParser (int argc, char **argv,
  struct LaneDetectorParserInfo *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use LaneDetectorParser_ext() instead
 */
int LaneDetectorParser2 (int argc, char **argv,
  struct LaneDetectorParserInfo *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int LaneDetectorParser_ext (int argc, char **argv,
  struct LaneDetectorParserInfo *args_info,
  struct LaneDetectorParser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int LaneDetectorParser_dump(FILE *outfile,
  struct LaneDetectorParserInfo *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int LaneDetectorParser_file_save(const char *filename,
  struct LaneDetectorParserInfo *args_info);

/**
 * Print the help
 */
void LaneDetectorParser_print_help(void);
/**
 * Print the version
 */
void LaneDetectorParser_print_version(void);

/**
 * Initializes all the fields a LaneDetectorParser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void LaneDetectorParser_params_init(struct LaneDetectorParser_params *params);

/**
 * Allocates dynamically a LaneDetectorParser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized LaneDetectorParser_params structure
 */
struct LaneDetectorParser_params *LaneDetectorParser_params_create(void);

/**
 * Initializes the passed LaneDetectorParserInfo structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void LaneDetectorParser_init (struct LaneDetectorParserInfo *args_info);
/**
 * Deallocates the string fields of the LaneDetectorParserInfo structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void LaneDetectorParser_free (struct LaneDetectorParserInfo *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use LaneDetectorParser_config_file() instead
 */
int LaneDetectorParser_configfile (const char *filename,
  struct LaneDetectorParserInfo *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int LaneDetectorParser_config_file (const char *filename,
  struct LaneDetectorParserInfo *args_info,
  struct LaneDetectorParser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int LaneDetectorParser_required (struct LaneDetectorParserInfo *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* LANEDETECTOROPT_H */
